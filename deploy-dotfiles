#!/usr/bin/ruby
# quick script to install dotfiles while setting up a new system

require 'optparse' # for parsing command-line options
options = {} # initialize empty hash, for storing command-line options

OptionParser.new do |opts|
  opts.banner = <<-USAGE.gsub(/^ */, '') # provide overview of script functionality, strip leading whitespace
  deploy-dotfiles

  Create symlinks for dotfiles when setting up a new system. This script 
  assumes that all files and folders in its directory should be symlinked 
  to $HOME, with a '.' prepended to the filename. It skips itself and any 
  file called 'README', as well as any hidden files in the current directory.

  It default mode, it won't clobber files (neither dotfiles nor symlinks 
  nor directories), but rather warns about the name conflict. Use the 
  nuclear option if you want to blow everything up and replace with fresh 
  symlinks.

USAGE
    opts.on("-k", "--nuke", "--nuclear", "it's the only way to be sure") do |k|
        $nuclear = k
    end
    opts.on("-d", "--dryrun", "make no changes, but display the changes that would have been made") do |d|
        $dryrun = d
    end
    opts.on("-v", "--verbose", "enable chatty output") do |v|
        $verbose = v
    end
end.parse!

parent_dir = File.absolute_path('..', __FILE__) # get directory from which this script is run (repo root)
dotfiles = Dir.entries(parent_dir).reject{|entry| entry =~ /^(\.|README$|#{__FILE__}$)/}

dotfiles.each do |source| # look at each file in the repository root
  source = File.absolute_path(source) # make full path out of relative filepath

  dotfile = ENV['HOME'] + '/.' + File.basename(source)  # concatenate fullpath to symlink for dotfile

  if $nuclear and ( test ?e, dotfile or test ?l, dotfile ) # if user requested Clobberbane
    File.delete(dotfile) unless $dryrun # clobber that file (unless this is a dry run)
  end

  if File.symlink?(dotfile) # check for symlink already in place
    puts "Not overwriting symlink for dotfile at #{dotfile} ..." # warn if found, 
    next # proceed to next source file in current directory
  end

  if File.exists?(dotfile) # check for symlink already in place
    puts "Not overwriting preexisting dotfile at #{dotfile} ..." # warn if found
    next # proceed to next source file in current directory
  end

  if File.symlink(source, dotfile) # create symlink, check for success
    puts "Created symlink: '#{dotfile}' -> '#{source}'" if $verbose # celebrate aloud, if asked
  else 
    puts "Could not create symlink for dotfile at #{dotfile}!" # warn user that failed symlink creation
  end
end
