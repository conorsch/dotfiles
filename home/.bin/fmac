#!/usr/bin/perl
# quick script to format MAC addresses according to two options:
# pretty formatting for pasting into an email and communicating with users,
# and a MathWorks-compatible version with colons removed.
# if supplied argument doesn't look like a MAC address, informs the user.

use strict;
use warnings;
use Getopt::Long;
use feature 'say';

GetOptions(    # process command-line option flags;
    'pretty|p'                    => \my $opt_pretty,       # 
    'mathworks|m|bare|b|simple|s' => \my $opt_mathworks,    # format 
    'help|h|?'                    => \my $opt_help,         # specify file to read from--maybe better just to read from STDIN;
) or die( "Couldn't parse options\n" );                     # if option processing failed, don't continue to run;

my $usage = <<USAGE;
fmac

Formats MAC addresses. Warns about malformed MACs, so you don't have to 
count digits and ensure proper structuring. Has options to do alphanumeric 
only, such as for pasting into MathWorks site forms.

Usage:

    fmac 90:b1:1c:86:49:d5      # returns '90:B1:1C:86:49:D5'
    fmac -m 90:b1:1c:86:49:d5   # returns '90B11C8649D5'
USAGE

say $usage and exit if $opt_help; # print usage and exit if --help option;
my @MACs = @ARGV;                                           # unpack all non-options as list of MAC addresses to be processed;
@MACs = <STDIN> unless @MACs;                               # read from STDIN if no arguments were supplied;

foreach my $mac_address ( @MACs ) {                         # look at each candidate for some error-checking;
    chomp $mac_address;                                     # remove pesky trailing newline (in case read from STDIN);

    $mac_address =~ s/\s+//g;                               # strip any and all whitespace from MAC address;
    $mac_address =~ s/>//g;                                 # strip any '>' (from copy/pasting out of email quoted blocks);
    say "MAC address '$mac_address' appears malformed; contains non-hex characters: '$&'"
      if $mac_address =~ m/[^[0-9A-F|:|-]]/i;               # if MAC address contains a non-hex, non-colon character;

    say "MAC address '$mac_address' appears malformed; wrong character or group count."
      if $mac_address !~ m/^([0-9A-F]{2}[:|-]?){6}$/i;      # if MAC address doesn't look like a MAC address;

    $mac_address =~ tr/[a-z]/[A-Z]/;                        # convert all characters to uppercase;
}

if ( $opt_mathworks ) {                                     # if MathWorks-compatible formatting was requested;

    foreach my $mac_address ( @MACs ) {                     # look at each candidate;

        $mac_address =~ s/([0-9A-Z]{2})([:|-]?)/$1/g;       # omit colons or hyphens from hex digit groupings;

    }
}

else {                                                      # if no option was specified, assume pretty/readable format is desired;

    foreach my $mac_address ( @MACs ) {                     # look at each candidate;

        $mac_address =~ s/([0-9A-Z]{2})([:|-]?)/$1:/g;      # ensure colons are placed after every two hex chars;
        $mac_address =~ s/:$//g;                            # strip final colon, which was unartfully appended above;

    }
}

say $_ for @MACs;                                           # display results to user;
