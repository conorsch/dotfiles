#!/usr/bin/env python3
"""
add-vim-plugin

Add vim plugins via pathogen in a git-managed dotfiles repo. Essentially a wrapper 
on `cd` and `git submodule add`. Accepts multiple repos. Error-checking is minimal, 
but script manages to fail gracefully on most errors. 

This script assumes that the dotfiles repo to which the submodule should be added 
lives at ~/gits/dotfiles. If this is not the case, make sure to specify the correct 
repository location on your system with the --destination option.

Usage:
    add-vim-plugin [options] <repository>...

Examples:
    add-vim-plugin https://github.com/nother/vim-prose
    add-vim-plugin -d ~/.vim https://github.com/nother/vim-prose
    add-vim-plugin --help

Supported options:

    -d, --destination    # specify dotfiles repo for adding submodule [default: ~/gits/dotfiles]
    -h, --help           # show this usage information
    -v, --verbose        # enable chatty output
"""

from docopt import docopt

import os
import sys
import git


def parse_repo_url(url):
    """Validates URL, returns tuple of original URL and name of plugin."""

    if "github.com" not in url:
        print("Specified remote git repository {} doesn't look right.".format(url)) 
        sys.exit(1)


    plugin_name = r.split("/")[-1]
    print("Plugin name: {}".format(plugin_name))
    return (url, plugin_name)

if __name__ == '__main__':
    args = docopt(__doc__, version='add-vim-plugin v0.1')
    repo = args['<repository>']

    for r in repo:
        url, plugin_name = parse_repo_url(r)

        dest = args['--destination']

        if not dest:
            base_dir = os.path.join(os.environ['HOME'], '.vim', 'bundle')
            if not os.path.isdir(base_dir):
                raise Exception("Could not find dest: {}".format(base_dir))
            dest = os.path.join(base_dir, plugin_name)

        print(dest)
        git_dir = git.Git(dest)
        git_dir.execute('submodule', 'add', r, dest)




