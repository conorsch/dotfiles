#!/bin/bash
# Read SSH connection information address from Ansible inventory,
# and open an interactive session over SSH. Results in 2 connections
# to the target host, one to retrieve the host facts and the second
# to open the session.
#
# If you use ControlPersist files in your ansible.cfg, those settings
# will be honored during the initial connection, but not automatically
# added to the subsequent ssh command. You'll need to reiterate the
# cp values in ~/.ssh/config to reuse the same socket.
set -e
set -u
set -o pipefail

if [[ "$#" -lt 1 ]]; then
    echo "Usage: $0 <ansible-host>"
    exit 1
fi

target_host="$1"
shift 1

# Monstrous Jinja template string for outputting all the host info
# we'll need. No support yet for common SSH args, e.g. ControlPersist files.
host_info_format="{{ hostvars['elk']['ansible_ssh_host']+' -p '+hostvars['elk']['ansible_ssh_port']|default('22')+' '+ansible_ssh_common_args|default('') }}"

# Find just the 'msg' line and extract it.
ssh_host_info=$(ansible -m debug \
    -a msg="${host_info_format}" "${target_host}" \
    | grep -P '^\s+"msg":' \
    | perl -npe 's/^\s+"msg": "(.*)"$/$1/')

if [[ -z "$ssh_host_info" ]] ; then
    printf "Could not find IP address for host '%s'\n." "${target_host}"
    exit 1
fi

# Pass extra options to SSH command, e.g. `-l <user>` to change user
bash -c "ssh ${ssh_host_info} $@"
