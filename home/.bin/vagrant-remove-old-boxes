#!/usr/bin/env python
"""
Simple script to clean up outdated versions of Vagrant boxes.
Will always preserve the newest box, and one per provider,
for each box found. Ignores unversioned boxes.
"""
import subprocess
from collections import namedtuple


def parse_box_line(box_line):
    """
    Takes output line of `vagrant box list` and
    returns a namedtuple with attributes name, provider, version.
    """

    Box = namedtuple("Box", "name provider version")
    try:
        box_name, provider_dirty, version_dirty = box_line.split()
        provider = provider_dirty.lstrip('(').rstrip(',')
        version = version_dirty.rstrip(')')
    except ValueError:
        print("Failed on box line: '{}'".format(box_line))
        raise

    return Box(box_name, provider, version)


def get_all_boxes():
    """
    Return list of dicts as box objects.
    """
    boxes = dict(providers=dict())


    cmd = "vagrant box list".split()
    raw_box_output = subprocess.check_output(cmd)
    raw_box_list = raw_box_output.strip().split("\n")
    for line in raw_box_list:
        box = parse_box_line(line)

        if box.provider not in boxes['providers'].keys():
            boxes['providers'][box.provider] = {}

        if box.name not in boxes['providers'][box.provider].keys():
            boxes['providers'][box.provider][box.name] = []

        boxes['providers'][box.provider][box.name].append(box)


    return boxes


def remove_box_version(box):
    """
    Removes a specific box version via vagrant.
    """
    cmd = ["vagrant", "box", "remove",
           "--box-version", box['version'],
           "--provider", box['provider'],
           box['name']]
    print(cmd); return True
    subprocess.call(cmd)


if __name__ == '__main__':
    boxes = get_all_boxes()
    for provider, box_info in boxes['providers'].iteritems():

        for box_name, box_instances in box_info.iteritems():
            if box_instances == []:
                print("Skipping box {}".format(box_name))
            else:
                box_instances.pop()
                for box_instance in box_instances:
                    remove_box_version(box_instance)
