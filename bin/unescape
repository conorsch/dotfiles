#!/usr/bin/perl
# quick script to unescape HTML escape chars in strings;
use strict;
use warnings;
use diagnostics;      # useful for debugging;
use feature 'say';    # beats print;
use Getopt::Long;     # for parsing command-line options;
use URI::Escape;      # for handling HTML escape characters;

my $usage = <<'END';
unescape

Unescape HTML escape chars in strings. Has an escape mode, 
too, because what the hell.

Usage: 
    unescape --escape 'I got spaces'        # prints 'I%20got%20spaces'
    unescape 'I%20got%20spaces'             # prints 'I got spaces'
    unescape --help                         # show this usage information

Supported options:

    -h, --help                              # show this usage information
    -v, --verbose                           # enable chatty output
END

GetOptions(
    'escape|e|r|reverse' => \my $escape_opt,
    'help|h|usage|?'     => \my $help,
    'verbose|v'          => \my $verbose,
) or die "$usage";

my $string = $ARGV[ -1 ];    # take last element on command line and unescape that;
$string = <STDIN> unless $string;

if ( $help ) {               # if user requested help/usage info;
    say $usage;              # display that help/usage info;
    exit 0;                  # exit cleanly;
}

if ( $escape_opt ) {         # oh my, user wants escaping done;
    say "Will now escape unwebby characters in the following string:\n
        $string

        The results of that look like this:\n" if $verbose;    # chatty is as chatty does;
    say uri_escape( $string );                                 # say that ugly result;
}

elsif ( $escape_opt ) {                                        # default mode is unescaping text, but check for option
    say "Will now unescape HTML characters in the following string:\n
        $string

        The results of that look like this:\n" if $verbose;    # chatty is as chatty does;
    say uri_unescape( $string );                               # say that beautiful result;
}
