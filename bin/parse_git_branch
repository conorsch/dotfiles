#!/bin/bash
# parse_git_branch
#
# script for showing git branch status
# intended usage is in PS1, e.g.:
# export PS1='u@\h{ \w } $(parse_git_branch): ' 
# drop this script in your PATH and you're good to go
#
# shamelessly stolen and modestly adapted from: 
# https://github.com/caio/oh-my-zsh/blob/a3c2a2f6e8ff9db508070a905de056346386ef4f/lib/git.zsh


if [[ -f /etc/bash_completion ]]; then #check for existence of bash_completion file (Ubuntu/Debian)
    . /etc/bash_completion #source it if found (for __git_ps1 command
fi
if [[ -f /etc/bash_completion.d/git.sh ]]; then #check for bash_completion elsewhere (OpenSUSE)
    . /etc/bash_completion.d/git.sh #source it if found
fi
if [[ -f /etc/bash_completion.d/git-prompt.sh ]]; then #check for bash_completion elsewhere (OpenSUSE)
    . /etc/bash_completion.d/git-prompt.sh #source it if found
fi
if [[ -f /etc/bash_completion.d/git-prompt ]]; then #check for bash_completion elsewhere (OpenSUSE)
    . /etc/bash_completion.d/git-prompt #source it if found
fi

function git_prompt_status() { # for future use, from oh my zsh
    local index=$(git status --porcelain 2> /dev/null)
    local gitstatus=""

    if $(echo "$index" | grep '^?? ' &> /dev/null); then
        gitstatus="$gitstatus"
    fi

    if $(echo "$index" | grep '^A ' &> /dev/null); then
        gitstatus="$gitstatus"
    elif $(echo "$index" | grep '^M ' &> /dev/null); then
        gitstatus="$gitstatus"
    fi

    if $(echo "$index" | grep '^ M ' &> /dev/null); then
        gitstatus="$gitstatus"
    elif $(echo "$index" | grep '^AM ' &> /dev/null); then
        gitstatus="$gitstatus"
    elif $(echo "$index" | grep '^ T ' &> /dev/null); then
        gitstatus="$gitstatus"
    fi

    if $(echo "$index" | grep '^R ' &> /dev/null); then
        gitstatus="$gitstatus"
    fi

    if $(echo "$index" | grep '^ D ' &> /dev/null); then
        gitstatus="$gitstatus"
    elif $(echo "$index" | grep '^AD ' &> /dev/null); then
        gitstatus="$gitstatus"
    fi

    if $(echo "$index" | grep '^UU ' &> /dev/null); then
        gitstatus="$gitstatus"
    fi

    echo "$gitstatus"
}

function get_git_branch {
    echo $(__git_ps1 "%s" )
}

function get_git_remote {
    echo $(git config --get branch.$branch.remote)
}

function parse_git_unpushed {
    # Check first for branch remote
    local branch=`get_git_branch`
    local remote=`get_git_remote`
    local unpublished=`__git_refs | grep $remote/$branch`
    if [[ "$unpublished" == "" ]]; then
    # No remote
        echo -e "\001\033[1;31m\002\xE2\x9C\xAA"
    else
        # Check if we've pushed to remote
        if [[ $remote != "" ]]; then
            local unpushed=`/usr/bin/git cherry -v $remote/$branch`
        else
            local unpushed=`/usr/bin/git cherry -v origin/$branch`
        fi
        if [[ "$unpushed" != "" ]]; then
            # Unpushed
            echo -e "\001\033[1;31m\002\xE2\x9A\xA1"
        else
            # Pushed
            echo -e "\001\033[1;32m\002\xE2\x9D\x80\001\033[0m\002"
        fi
    fi
}

function parse_git_dirty() {
    if [[ -n $(git status -s 2> /dev/null) ]]; then
        echo -e "\001\033[1;31m\002\xE2\x9C\x97\001\033[0m\002"
    else
        local thing=1
    fi
}

git --version &>/dev/null #try to run git
if [[ $? -eq 0 ]]; then #if git command above returned 0, indicating git is installed...

    branch=`get_git_branch`
    remote=`get_git_remote`

    if [[ $branch != "" && $remote != "" && $remote != "origin" ]]; then
    branch="$remote\001\033[1;34m\002/\001\033[1;33m\002$branch"
    fi

    [[ $branch ]] && echo -e "[\001\033[1;33m\002$branch$(parse_git_dirty)$(parse_git_unpushed)\001\033[0m\002]"
else #if git is NOT installed
    echo '' #do nothing
fi
