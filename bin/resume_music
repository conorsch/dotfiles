#!/usr/bin/perl 
#script to resume paused music when returning to the apartment (network);

use strict;
use warnings;
use File::ReadBackwards; #indispensable for reading logfiles bottom-up;
use feature 'say'; #why use print?

my $phone_ip = '10.0.0.51'; #declare IP address for phone, for pinging incessantly;
my $roommate_ip = '10.0.0.6'; #declare IP address for roommate's phone;

my $state_filepath = '/home/conor/.conor_presence'; #log file to store presence info;

open my $state_file, '>>', $state_filepath  #open log file for appending;
    or die "Can't open the state file: $!"; #die miserably if opening failed;

my $state_file_bw = File::ReadBackwards->new($state_filepath) #open log file for backwards reading;
    or die "Can't open the state file: $!"; #die miserably if opening failed;


check_presence();

sub check_presence { #check for presence of phone by pinging it;

    my $is_home = check_if_home($phone_ip); #check whether phone is on the network;
    say $state_file "#MY RESULT LOOKS LIKE: '$is_home'"; #debugging output;

    my $presence; #declare variable in proper scope for conditional assignment;
    if ($is_home) { #if return value of phone check was positive/true;
        $presence = 'yes'; #set presence to positive value;
    }
    else { #if return value of phone check was not true;
        $presence = 'no'; #set presence to negative value;
    }
    

    my $is_change = is_change($presence); #check whether this presence state is a change from last known state;

    say $state_file time, " $presence" 
        or die "Could not write to state file: $!";

    if ($is_change == 0) { #if current presence state constitutes a change from the previous state;
        exit 0; #sleep for a bit, eh?;
    }

    elsif ($is_change == 1) { #if user left the apartment;
        say $state_file "#PAUSING music!";
        pause_music(); #pause that music;
    }

    elsif ($is_change == 2) { #if user arrived back home;
        if ( check_if_home($roommate_ip) ) { #exit failure if roommate is in the house;
            say $state_file time, " Carl's home, taking no action."; 
            exit 2;
        }

        else { #if roommate is not home;
            say $state_file "#UNPAUSING music!";
            unpause_music(); #unpause that music;
        }
    }


}

sub is_change { 
    #checks whether the current state of presence is a change from the last known state;
    #returns 0 if no change, 1 if 'left', and 2 if 'arrived';
    my $current_state = shift;
    say $state_file "#CURRENT STATE looks like: '$current_state'";

    my ($old_time, $old_state);
    while ( defined( my $log_entry = $state_file_bw->readline ) ) { 
        next if $log_entry =~ m/^#/;
        ($old_time, $old_state) = split(/\s/, $log_entry);
        last;
    }

    say $state_file "#PREVIOUS STATE looks like: '$old_state'";
    if ($current_state eq $old_state) {
        say $state_file "#NO CHANGE";
        return 0; #return 0, indicating no change; 
    }
    else { #if there was a change!;

        if ($current_state =~ m/no/) { #if change was yes -> no;
            say $state_file "#User LEFT (current state: $current_state)";
            return 1; #return 1, meaning user left;
        }

        elsif ($current_state =~ m/yes/) { #if change was no -> yes;
            say $state_file "#User ARRIVED";
            return 2; #return 2, meaning user arrived;
        }
        else { #unknown corner case, possibly uninitialized log file;
            warn "Unable to figure out arrived/left state of presence!";
        }
    }
}
sub time_since_last { 
    my $state = shift; #unpack requested state for searching backwards through time;
    my $time = time;

    while ( defined( my $log_entry = $state_file_bw->readline ) ) { 
        next if $log_entry =~ m/^#/;
        my ($old_time, $old_state) = split(/\s/, $log_entry);
        next unless $old_state !~ m/$state/;
        my $time_since = $time - $old_time;
        return $time_since;
    }
}


sub check_state_file { #read state file for last known presence;
    while ( defined( my $log_entry = $state_file_bw->readline ) ) { 
        next if $log_entry =~ m/^#/;
        my ($old_time, $old_state) = split(/\s/, $log_entry);
        my ($time, $stale_presence) = split(/\s/, $log_entry);
        return $stale_presence; #pass back what we found in the file;
    }


}
    
sub check_if_home { #check whether supplied IP address is present on the network;
    my $ip = shift; #unpack IP address from function caller;
    `/bin/ping -c 1 $ip`; #ping that phone;
    my $result = $? >> 8; #store exit code of ping command (0 on success);
    if ($result == 0) { #if exit code of ping command is 0, meaning 'yes';
        return 1; #return positive value to caller;
    }
    else { #if the exit code of ping command was not success;
        return 0; #return failure;
    }
}


sub unpause_music { #log in via SSH and unpause that music;
    `/usr/bin/ssh s 'mocp --unpause'`; #perform that shit;
#    `mocp --unpause`; #perform that shit;
}
        
sub pause_music { #log in via SSH and unpause that music;
    `/usr/bin/ssh s 'mocp --pause'`; #perform that shit;
#    `mocp --pause`; #perform that shit;
}


