#!/usr/bin/perl
# quick script to add vim plugin via pathogen in git-managed dotfiles;
# essentially just a wrapper for cd magic and git submodule setup;
use strict;
use warnings;
use diagnostics; # useful for debugging;
use feature 'say'; # beats print;
use Getopt::Long; # for parsing command-line options;
use File::chdir; #for easy temporary switching of CWD;
$|++; # disable line-buffering, for real-time output;

my $usage = <<'END';
addvimplugin

Add vim plugins via pathogen in a git-managed dotfiles repo. Essentially a wrapper 
on `cd` and `git submodule add`. Accepts multiple repos. Error-checking is minimal, 
but script manages to fail gracefully on most errors. 

You will have to hard code the location of your local dotfiles working copy!

Usage: 
    addvimplugin https://github.com/nother/vim-prose        # installs vim-prose plugin
    addvimplugin --help            # show this usage information

Supported options:

    -h, --help             # show this usage information
    -v, --verbose        # enable chatty output

END

GetOptions ( 
        'help|h|usage|?'    =>    \my $help,
        'verbose|v'            =>    \my $verbose,
        ) or die "$usage";

if ( $help ) { # if user requested help/usage info;
    print $help; # display help/usage info;
    exit 0; # exit cleanly;
}

my @git_repos = @ARGV or die "$usage"; # unpack remote git repos, die if none given;
my $home = $ENV{'HOME'}; # retrieve user ~/ from environment variable special hash;
my $repo_root = $home . '/gits/dotfiles'; # concatenate fullpath to expected location of dotfiles dir;

-d $repo_root or die "Can't find local working copy for dotfiles at '$repo_root'";

say "Now installing " . ( $#git_repos + 1 ) . " submodules in '$repo_root'..." if $verbose; # user feedback;

for my $git_repo ( @git_repos ) { # do this for each specified git repo;

    unless ( $git_repo =~ m/\.git$/i or         # dirty error-checking to make sure we have a git repo here;
             $git_repo =~ m/github\.com/ ) {    # if it contains 'github', should be good;
        die "Specified remote git repository '$git_repo' doesn't look right.";
    }

    my $software_name = ( split( /\//, $git_repo ) )[-1]; # break up that URL, grab last element;
    $software_name =~ s/(\.\w+)?$//; # strip out suffix on software name, if there;
    my $destination = 'vim/bundle/' . $software_name;  # concatenate relative path to dir for this submodule;

    say "Setting up '$software_name' in '$destination'..." if $verbose; # user feedback;

    {
        # `git submodule add` expects to be run from the top-level of the local 
        # working copy, so let's hop inside that dir temporarily to run the command;
        local $CWD = $repo_root; 

        if ( -d $repo_root ) { # make sure this directory actually exists;

            system( "git submodule add $git_repo $destination" );
#== 0 or die "Could not create new git submodule for '$software_name'";
        }

        else { # if somehow the local working copy of the dotfiles repo isn't found;
            die "Unable to find dotfiles working copy at '$repo_root'";
        }
    }
}
