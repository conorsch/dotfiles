#!/bin/bash
# dual-monitor configs for various machines
set -euo pipefail

# set up some default vars shared across hosts
primary_monitor=$(xrandr | perl -nE '/^([\w-]+) connected primary / && say $1')
secondary_monitor=$(xrandr | perl -nE '/^([\w-]+) connected (?!primary)/ && say $1')

if [[ -z "${secondary_monitor}" ]] && [[ "${1:-}" = "solo" ]] ; then
    >&2 echo "WARNING: no secondary monitor found."
fi

# Configure "normal" setup via xrandr
function sane_defaults() {
    xrandr --auto
    xrandr --output "${primary_monitor}" --primary
}

# redraw desktop (fixes both orientation and tiling issues)
function nitrogen_restore() {
    nitrogen --restore > /dev/null 2>&1
}

# Preserve the internal laptop display at native resolution,
# but stretch that to an external monitor at 1080p.
# via: https://superuser.com/a/1247117
function mirror_to_projector() {
    # N.B. display names are hardcoded for Framework 13
    xrandr --output DisplayPort-1 --rotate normal --auto --scale-from 2256x1504 --output eDP
}

# Configure the external monitor ('projector') as a 1080p resolution secondary display,
# to the right of the internal/primary laptop display.
function multitask_projector() {
    # N.B. display names are hardcoded for Framework 13
    xrandr --output DisplayPort-1 --auto --right-of eDP
}

# Determine how many screens are available. If only one,
# we should reset to defaults.
function how_many_monitors() {
    xrandr | perl -lanE 'say $F[1]' | rg '^connected' -c
}

# Primary entrypoint.
function main() {
    if [[ "$(how_many_monitors)" = 1 ]] ; then
        sane_defaults
        >&2 echo "Resetting to default state"
    else
        # TODO: make these options accessible via cli args
        multitask_projector
        # mirror_to_projector
    fi
    nitrogen_restore
}

main
