#!/usr/bin/perl
# quick script to grab newest video file from phone;
use strict;
use warnings;
use diagnostics;      # useful for debugging;
use feature 'say';    # beats print;
use Getopt::Long;     # for parsing command-line options;
use File::Find;       # for finding files;
$|++;                 # disable line-buffering (for real-time output);

my $usage = <<'END';
get_newest_video

grab newest video file from phone. 

Usage: 
	get_newest_video --gif		    # convert video to GIF
	get_newest_video --num 3		# get the 3 newest videos
	get_newest_video --help			# show this usage information

Supported options:

	-n, --number 		# request a certain number of videos (default is 1)
	-g, --gif 		    # make a GIF after video is copied
	-h, --help 			# show this usage information
	-v, --verbose		# enable chatty output

END

GetOptions(
    'number|n=s'     => \my $max_requested,
    'help|h|usage|?' => \my $help,
    'verbose|v'      => \my $verbose,
) or die "$usage";

my $dir  = '/mnt/NEXUSONE/DCIM/Camera';      # declare fullpath to directory containing video files;
my $dest = $ENV{ 'HOME' } . '/Downloads';    # declare fullpath to directory to which files will be copied;
my %video_files;                             # initialize hash in proper scope;
my $counter = 1;                             # initialize counter for verbose output;

if ( $max_requested ) {                      # check whether user requested certain number of videos;
    $max_requested--;                        # if so, decrement it by one, so it applies as array index;
}
else {
    $max_requested = 0;                      # if not, set it to zero, so just one result is returned;
}

find(
    sub {
        print "Examining file " . $counter++ . "...\r" if $verbose;    # chatty output;
        return unless /\.mp4$/i;                                       # skip if not a video file;
        $video_files{ $File::Find::name } = ( stat )[ 9 ];             # grab last modified time for this file;
    },
    $dir
);

my @desired_videos = ( sort { $video_files{ $b } <=> $video_files{ $a } } keys %video_files )[ 0 .. $max_requested ];

if ( @desired_videos >= 0 ) { # make sure files were found;
	say "Copying " . ( $#desired_videos + 1 ) . " videos to $dest..." if $verbose; # chatty output;

	system( "rsync -avPh @desired_videos $dest" ) == 0
		or die "Could not copy video files to '$dest'";
}
else { 
	say "No video files were found in '$dir'."; # inform user of error;
	exit 1; # exit with failure;
}
