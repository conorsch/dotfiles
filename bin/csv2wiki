#!/usr/bin/ruby
# quick script to format MAC addresses according to two options:
# pretty formatting for pasting into an email and communicating with users,
# and a MathWorks-compatible version with colons removed.
# if supplied argument doesn't look like a MAC address, informs the user.

require 'optparse' # for parsing command-line options
options = {} # initialize empty hash, for storing command-line options

OptionParser.new do |opts|
	opts.banner = <<-USAGE.gsub(/^( |\t)*/, '') # provide overview of script functionality, strip leading whitespace
	csv2wiki

	Converts a CSV file to Wiki table markup. This script reads from STDIN, 
	and writes to STDOUT, so getcher pipes ready. Spit a file at it and 
	direct the result wherever you want.

	The default behavior uses a comma as the field delimiter, but you can specify 
	a colon with the --colon option, or some other separator with the --separator 
	option. The --separator option doesn't understand colons, though.

	USAGE

	opts.on("-s", "--separator [SEPARATOR]", "set a custom separate (default is ':')") do |s|
		$separator = s
	end
	opts.on("-:", "--colon", "specify field delimiter of ':'") do 
		$separator = ':'
	end
	opts.on("-,", "--comma", "specify field delimiter of ',' (default)") do
		$separator = ',' 
	end
	opts.on("-v", "--verbose", "enable chatty output") do |v|
		$verbose = v
	end
end.parse!

$separator = ',' unless $separator # provide a default value for CSV file

puts '{| border="1" cellspacing="0" cellpadding="5" align="center"'; # open table formatting;

while STDIN.gets # read from STDIN for CSV data;
	$_.split(/#{$separator}/).each { |line| puts ( $. == 1 ? '!' : '|' ) + line } # write headers to STDOUT ( '!' in wiki markup means bold those headers);
	puts '|-' # end this line of the wiki table;
end

puts '|}'; # close table formatting;
