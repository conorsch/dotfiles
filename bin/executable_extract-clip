#!/bin/bash
# Utility script to make a video file from a longer video file.
# Optionally can render as a gif too.
# shellcheck disable=SC2317
set -euo pipefail


# Arg parsing
if [[ $# -lt 3 ]]; then
    echo "Usage: $0 <vid.mp4> <start_time> <duration>"
    exit 1
fi
target_video="${1:-}"
start_time="${2:-}"
duration="${3:-}"
shift 3

# Preserve file extension, but append "-clip" to original filename.
# Citations: https://superuser.com/a/90096 & http://www.tldp.org/LDP/abs/html/parameter-substitution.html
dest_video="${target_video%.*}-clip.${target_video##*.}"

# Blow away target video file, because ffmpeg has no overwrite option.
rm -f "$dest_video"

printf 'Extracting video clip...'
# ffmpeg command seems to break on hevc; video file is blank.
# gifski reports: 'error: The file has no video tracks'
# Consider adding `-c:v copy -c:a copy` for very fast slicing.
# Stumbles a bit on keyframes, so sometimes there's a judder
# at the start, but otherwise a timesaver.
ffmpeg -i "$target_video" -ss "$start_time" -t "$duration" \
    -loglevel 0 \
    "$dest_video" > /dev/null
printf ' OK\n'

# Exit early, before GIF is made, because usually we just want a clip.
# TODO: make this logic conditional on a CLI flag.
echo "Creating gif from video clip..."
gifski --output "${dest_video%.*}.gif" --height 500 --quality 70 "$dest_video"
