#!/bin/bash
# Utility script to make a video file from a longer video file.
# Optionally can render as a gif too.
# shellcheck disable=SC2317
set -euo pipefail

# By default, don't generate a GIF.
MAKE_GIF=0
# By default, don't open the file for viewing.
OPEN_FILE=0

# Arg parsing. First, we'll look for `-g` opts, then do
# another loop to handle positional args.
while [[ $# -gt 0 ]]; do
  case $1 in
    -g|--gif)
      MAKE_GIF=1
      shift
      ;;
    -o|--open)
      OPEN_FILE=1
      shift
      ;;
    --*|-*)
      echo "Unknown option $1"
      exit 1
      ;;
    *)
      # save positional arg for next arg-parsing loop
      POSITIONAL_ARGS+=("$1")
      shift
      ;;
  esac
done

# Restore positional parameters. See more info on this approach:
# https://stackoverflow.com/a/14203146
set -- "${POSITIONAL_ARGS[@]}"

# Second arg-parsing loop, handling positional args.
# We can't use `$#` since that would include e.g. `--gif` as well.
# if [[ $# -lt 3 ]]; then
if [[ ${#POSITIONAL_ARGS[@]} -lt 3 ]]; then
    echo "Usage: $0 <vid.mp4> <start_time> <duration>"
    exit 1
fi
target_video="${1:-}"
start_time="${2:-}"
duration="${3:-}"
shift 3

# Preserve file extension, but append "-clip" to original filename.
# Citations: https://superuser.com/a/90096 & http://www.tldp.org/LDP/abs/html/parameter-substitution.html
dest_video="${target_video%.*}-clip.${target_video##*.}"

# Blow away target video file, because ffmpeg has no overwrite option.
rm -f "$dest_video"

printf 'Extracting video clip...'
# ffmpeg command seems to break on hevc; video file is blank.
# gifski reports: 'error: The file has no video tracks'
# Consider adding `-c:v copy -c:a copy` for very fast slicing.
# Stumbles a bit on keyframes, so sometimes there's a judder
# at the start, but otherwise a timesaver.
ffmpeg -i "$target_video" -ss "$start_time" -t "$duration" \
    -loglevel 0 \
    "$dest_video" > /dev/null
printf ' OK\n'

# Make a gif if requested.
if [[ $MAKE_GIF -gt 0 ]] ; then
    >&2 echo "Making gif..."
    gifski --output "${dest_video%.*}.gif" --height 500 --quality 70 "$dest_video"
fi

# View file if requested.
if [[ $OPEN_FILE -gt 0 ]] ; then
    >&2 echo "Opening file..."
    vlc "$dest_video"
fi
