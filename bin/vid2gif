#!/usr/bin/perl
# quick script to convert a video file to a GIF based on time indicators;
use strict;
use warnings;
use diagnostics;      # useful for debugging;
use feature 'say';    # beats print;
use Getopt::Long;     # for parsing command-line options;
use File::Temp;       # for tempdirs to store scratch files;
$|++;                 # disable line-buffering, for real-time output;

my $usage = <<'END';
vid2gif

convert a video file to a GIF based on time indicators. 

Usage: 
	vid2gif --start 00:01:10   		# begin GIF at time HH::MM::SS
	vid2gif --length 2		   		# GIF should include 2 seconds of video
	vid2gif --resolution 425x320	# reformat GIF to given dimensions
	vid2gif --help		       		# show this usage information

	vid2gif --start 00:00:07 --length 7 --resolution 50x50

Supported options:

	-h, --help 			# show this usage information
	-v, --verbose		# enable chatty output

END

GetOptions(
    'start|s=s'      => \my $start_time,
    'resolution|r=s' => \my $resolution,
    'length|l=s'     => \my $length,
    'help|h|usage|?' => \my $help,
    'verbose|v'      => \my $verbose,
) or die "$usage";

if ( $resolution ) {    # check whether user specified a custom resolution for GIF;
    $resolution =~ s/x/:/;    # swap in a colon where x is more user-friendly;
    $resolution = "-vf scale=$resolution";    # prepend option title if user requested certain resolution;
}
else {                                        # if no custom resolution was requested;
    $resolution = '';                         # set to empty string, so it can still be interpolated in the system() call;
}

my $video_file = pop @ARGV or die "$usage";    # grab video file as last element on command line;

my $tempdir = File::Temp->newdir                         # create
  or die "Could not create temporary directory $!";      # die on failure;

print "Generating intermediate images... " if $verbose;  # chatty output;
system( "mplayer -quiet -ao null -ss $start_time -endpos $length $video_file -vo jpeg:outdir=$tempdir/ $resolution >/dev/null 2>&1" ) == 0
  or die "Could not generate temporary images; please manually cleanup $tempdir.";    # die on failure
say "done." if $verbose;                                                              # chatty output;

print "Assembling full animated GIF... " if $verbose;                                 # chatty output;
system( "convert $tempdir/*.jpg output.gif >/dev/null 2>&1" )                         # shell out to convert to run conversion;
  == 0 or die "Could not create assembled GIF image.";                                # die on failure;
say "done." if $verbose;                                                              # chatty output;
say "View the file at: output.gif" if $verbose;

File::Temp::cleanup;           # remove any unused temp files;
system( "rm -rf $tempdir" )    # hard-remove the temp directory, because cleanup() doesn't work if there are files;
  == 0 or die "Failed to clean up temp directory at $tempdir";    # die on failure to remove temp directory;
