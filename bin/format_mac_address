#!/usr/bin/ruby
# quick script to format MAC addresses according to two options:
# pretty formatting for pasting into an email and communicating with users,
# and a MathWorks-compatible version with colons removed.
# if supplied argument doesn't look like a MAC address, informs the user.

require 'optparse' # for parsing command-line options
options = {} # initialize empty hash, for storing command-line options

OptionParser.new do |opts|
	opts.banner = <<-USAGE.gsub(/^( |\t)*/, '') # provide overview of script functionality, strip leading whitespace
	format_mac_address

	Formats MAC addresses. Also validates that strings are properly 
	constructed MAC addresess. Default behavior is to render valid MACs as 
	colon-separated uppercase strings. A custom separator can be specified 
	with the --separator option, or ommitted with --bare. 

	When running the --validate option, the program will return 0 if all MACs 
	are validly constructed, and 1 if any fails validation.

USAGE
	opts.on("-b", "--bare", "print only alphanumerics (no separator)") do |b|
		$bare = b
	end
	opts.on("-d", "--validate", "check for validly constructed MACs") do |d|
		$validate = d
	end
	opts.on("-s", "--separator [SEPARATOR]", "set a custom separate (default is ':')") do |s|
		$separator = s
	end
	opts.on("-v", "--verbose", "enable chatty output") do |v|
		$verbose = v
	end
end.parse!

MACs = ARGV # grab MAC addresses from command line

MACs.each do |mac_orig|
	mac = mac_orig.dup.chomp.upcase!
	mac.gsub!(/(\s|>)+/, '') # strip all whitespace from MAC address, also '>' (text email quoting)

	if mac !~ /^[[:xdigit:]|:|-]+$/ # if MAC address contains a non-hex, non-colon character
		exit 1 if $validate # report failure if validating addresses
		warn "MAC address #{mac_orig} appears malformed; contains non-hex characters"
	end

	if mac !~ /^([[:xdigit:]]{2}[:|-]?){6}$/ # if MAC address doesn't look like a MAC address
		exit 1 if $validate # report failure if validating addresses
		warn "MAC address #{mac_orig} appears malformed; wrong character or group count." 
		next
	end

	$separator =  ":" if defined?($separator).nil? # provide default separator, if no special requests were made

	mac.gsub!(/([[:xdigit:]]{2})[:|-]?/, $bare ? '\1' : '\1' + "#{$separator}" ) # omit colons or hyphens from hex digit groupings;
	mac.chop! unless $bare # remove final colon
	puts mac unless $validate # print that result, unless we're being quiet
end
