#!/bin/bash
# Download and install binaries for Penumbra. Defaults to the most recent
# release, as available in the Github API, but supports older releases too,
# by specifying the tag name.
set -euo pipefail


# Create global tempfile for writing API JSON
f="$(mktemp -p /tmp penumbra-binaries-release-XXXXX)"

# Retrieve the most recent release available on Github.
function get_latest_release() {
  curl -sSfL https://api.github.com/repos/penumbra-zone/penumbra/releases/latest -o "$f"
}

# Retrieve release for a given git tag.
function get_specific_release() {
  local t
  t="${1:-}"
  shift 1
  curl -sSfL https://api.github.com/repos/penumbra-zone/penumbra/releases \
    | jq -e ".[] | select(.tag_name == \"${t}\")" > "$f"
}

# Parse GitHub Release JSON and extract platform-specific download URLs.
function get_asset_urls() {
    jq -r '.assets[].browser_download_url' \
        "$f" \
        | grep "$(uname -m)" \
        | grep "$(uname -s)" -i
}

# Parse args. First arg, if any, is a git tag, otherwise default to latest release.
sought_tag="${1:-}"
if [[ -n "$sought_tag" ]] ; then
  if ! get_specific_release "$sought_tag" ; then
    >&2 echo "ERROR: Penumbra version not found '$sought_tag'"
    exit 1
  fi
else
  get_latest_release
fi

# Pilfer tag name so we can use it in messaging
tag_name="$(jq -r .tag_name "$f")"
# Set global vars.
target_base_dir="/opt/penumbra"
dest_dir="${target_base_dir}/${tag_name}"

# Attempt idempotence: doesn't really ensure the bins are there,
# but it's a reasonable assumption.
if [[ -d "$dest_dir" ]] ; then
  >&2 echo "Directory for '$tag_name' already exists, skipping..."
  exit 0
fi

# Download 'em.
>&2 echo "Downloading bins for ${tag_name} ..."
# Create temporary directory for downloading the compressed artifacts.
d="$(mktemp -p /tmp -d penumbra-binaries-XXXXX)"
cd "$d" || exit 1
while read -r asset_url ; do
    curl -sSfL -O "$asset_url" &
done < <(get_asset_urls)
wait

# Unzippify
>&2 echo "Extracting binaries..."
# Prior to v0.73.1, artifacts were posted as `.tar.xz`.
# Inclusive of v0.73.1 and thereafter, artifacts are posted as `.tar.gz`.
find . -type f -iname '*.xz' -print0 | xargs -0 -P 5 -r -n1 xz -d
find . -type f -iname '*.tar' -print0 | xargs -0 -P 5 -r -n1 tar -xf
find . -type f -iname '*.tar.gz' -print0 | xargs -0 -P 5 -r -n1 tar -xf

# Check that dir is writable, otherwise make it so.
if [[ ! -e "$target_base_dir" || ! -w "$target_base_dir" ]] ; then
    sudo mkdir -p "$target_base_dir"
    sudo chmod 775 "$target_base_dir"
    sudo chown "root:${USER:-}" "$target_base_dir"
fi
# Install.
>&2 echo "Installing binaries to: $dest_dir"
mkdir -p "$dest_dir"
find "$d" -type f -executable -exec mv -t "$dest_dir" {} +

# Update latest symlink
rm -f /opt/penumbra/latest
ln -sf "$dest_dir" /opt/penumbra/latest

# Enable binding to low ports as normal user
# echo "Setting net-bind capabilities for pd"
# sudo setcap CAP_NET_BIND_SERVICE,CAP_NET_ADMIN=+ep "${dest_dir}/pd"

>&2 echo "Provisioned binaries for Penumbra ${tag_name} in:"
find "$dest_dir" -type f -executable
