#!/bin/bash
# Download and install binaries for the most recent Penumbra release.
set -euo pipefail


# Look up most recent release from GitHub
f="$(mktemp -p /tmp penumbra-binaries-release-XXXXX)"
curl -sSfL https://api.github.com/repos/penumbra-zone/penumbra/releases/latest -o "$f"
# Pilfer tag name so we can use it in messaging
tag_name="$(jq -r .tag_name "$f")"

# Parse GitHub Release JSON and extract platform-specific download URLs.
function get_asset_urls() {
    jq -r '.assets[].browser_download_url' \
        "$f" \
        | grep "$(uname -m)" \
        | grep "$(uname -s)" -i
}

# Download 'em.
echo "Downloading bins for ${tag_name} ..."
# Create temporary directory for downloading the compressed artifacts.
d="$(mktemp -p /tmp -d penumbra-binaries-XXXXX)"
cd "$d" || exit 1
while read -r asset_url ; do
    curl -sSfL -O "$asset_url" &
done < <(get_asset_urls)
wait

# Unzippify
echo "Extracting binaries..."
# Prior to v0.73.1, artifacts were posted as `.tar.xz`.
# Inclusive of v0.73.1 and thereafter, artifacts are posted as `.tar.gz`.
find . -type f -iname '*.xz' -print0 | xargs -0 -P 5 -r -n1 xz -d
find . -type f -iname '*.tar' -print0 | xargs -0 -P 5 -r -n1 tar -xf
find . -type f -iname '*.tar.gz' -print0 | xargs -0 -P 5 -r -n1 tar -xf

# Check that dir is writable, otherwise make it so.
target_base_dir="/opt/penumbra"
if [[ ! -e "$target_base_dir" || ! -w "$target_base_dir" ]] ; then
    sudo mkdir -p "$target_base_dir"
    sudo chmod 775 "$target_base_dir"
    sudo chown "root:${USER:-}" "$target_base_dir"
fi
# Install.
dest_dir="${target_base_dir}/${tag_name}"
echo "Installing binaries to: $dest_dir"
mkdir -p "$dest_dir"
# TODO: requires `fd` rather than find.
fd -t x . -X mv -v -t "$dest_dir"

# Update latest symlink
rm -f /opt/penumbra/latest
ln -sf "$dest_dir" /opt/penumbra/latest

# Enable binding to low ports as normal user
# echo "Setting net-bind capabilities for pd"
# sudo setcap CAP_NET_BIND_SERVICE,CAP_NET_ADMIN=+ep "${dest_dir}/pd"

echo "Provisioned binaries for Penumbra ${tag_name} in:"
fd -t x . "$dest_dir"
